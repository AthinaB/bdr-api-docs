swagger: "2.0"
info:
  title: Blood Donor Registry for donors' application
  description: Should add more description?
  version: 0.0.1
host: service.blooddonorregistry.gr
schemes:
  - https
produces:
  - application/json
  - text/html
consumes:
  - application/json
  - text/plain
paths:
  /rest/captcha:
    get:
      summary: Get captcha data.
      description: |
        Get captcha image (base64) and its id. Use the id and the text that displays (answer) for the requests that is necessary.

        No login (token) required.
      operationId: getCaptcha
      security: []
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Captcha'
          examples:
          {
            "id": "91606034"
            "img": "iVBORw1KGgoAAAANSUhEUgAAAJYAAAAyCAIAAAAx7rVNAAANZUlEQVR42u2ceXQVRRaHQcRAIAgCJogIkgQCEcJywuJhx+CETUFkEASNIIuJAoJORBYRGRYDsg2gLLKOQQJEwiiQgAIjm0wgwVEWRQm7gIyiiPLPfKc6p17TXV3p916A4Hn3j3eSl9td1f3V/dW9XdUpVixgfwJr27Ztu3bt2rdv/8gjj8TFxXXo0OEvwjp27NipU6fOnTt36dKla9eujz/+eLdu3bp37/7EE0/06NHjySef/Kuwp556qnfv3n369Hn66af79u3br1+/Z599NiEh4bnnnuvfv/+AAQMGChs8ePCQIUNeeOGFxMTEpKSkF198cejQocOGDRs+fPjLL788YsSIkSNHvvLKK38T9tprr40aNer1118fPXr0mDFjxo4d+8Ybb4wfP/7NN9+cMGHCW2+99XdhkydPnjJlytSpU99+++2UlJRp06a98847M2bMmDlz5qxZs2bPnv0PYfPmzZs/f/6777773nvvLViwYOHChYsXL37//feXLFmydOnSZcuWLV++fMWKFf8UlpqaumrVqg8//HD16tVpaWlr1qxZt25denr6Rx99tH79+oyMjH8J++STTzZu3Lhp06bNmzdnZmZmZWVt3br1008//eyzz7Zt27Z9+/Z/C9u5c+euXbt27969Z8+evXv3fvHFF/8Rtn///gMHDuTk5OTm5h48ePC/wr7++utDhw4dPnz4yJEjR48e/eabb44dO/bdd999//33x48fz8vLOyns9OnTZ86cOXv27Llz56wI44Q9+uij8IuPj5cIuwqTCHsI69mzJ/x69eolEfYV9swzzxgI+wt7/vnn4Tdo0CCJMEnYSy+9ZEY4Utirr74Kv+TkZIlwjLBx48YZCCcImzhxIvwmTZokEaYImz59uoFwlrA5c+bAb+7cuRLhAmGLFi0yI1wubOXKlfD74IMPJMI0YWvXrjUQrhe2YcMG+H388ccSYaawLVu2GAi3CduxYwf8Pv/8c4lwr7B9+/bBLzs720CYK+zLL7+E31dffWVGCN1vv/3WQHhc2IkTJ+B36tQpifCHH37IR9hOmAxBibCTMCMEH3vssW7CZAhKhL2FmUMQkyEoEQ4RJkPQQDhcmAxBiXCUMHMIYjIEJcIpwmQIGghlCEqE84XJEDQQLhEm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"
          }
  /rest/helpdeskissue:
    post:
      summary: Post an issue, in order to communicate with helpdesk.
      description: |
        A user can send an issue. This goes to backend and then to jira.


        No login (token) required.
      operationId: sendIssue
      security: []
      parameters:
        - in: body
          name: issue
          description: Send an issue to helpdesk. This goes to bdr backend and then to jira.
          schema:
            $ref: '#/definitions/Issue'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/IssueWithKey'
          examples:
          {
            "captchaAnswer": "842nn"
            "captchaId": 91566745
            "description": "testing issue"
            "email": "test@example.com"
            "firstName": "John"
            "key": "BDR-19954"
            "lastName": "Doe"
            "phoneNumber": "2152157865"
            "subject": "Test"
            "type": "login_user_failed"
          }
        400:
          description: Bad request
          schema:
            $ref: '#/definitions/ErrorMsg'
          examples:
          {
            "error": "invalid captcha"
          }
  '/locale/{lang}.json':
    get:
      summary: Get i18n json
      description: |
        All the texts that the UI needs to display in key-value pairs.

        No login (token) required.

        Available languages:

        - English : en
        - Greek : el
      operationId: getLocale
      parameters:
        - name: lang
          in: path
          type: string
          required: true
      security: []
      produces:
        - application/json
        - text/html
      responses:
        200:
          description: OK
          schema:
            type: object
        404:
          description: Not found
          schema:
            type: object
          examples:
            text/html: |
              <!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
              <html>
                <head><title>404 Not Found</title></head>
                <body>
                  <h1>Not Found</h1>
                  <p>The requested URL /locale/gr.json was not found on this server.</p>
                  <hr>
                  <address>Apache/2.4.10 (Debian) Server at web.test.bdr.grnet.gr Port 443</address>
                </body>
              </html>
  /blood-donor-registry-web-public/rest/authentication/logged-on:
    get:
      summary: Retrieve user data
      description: |
        TBA
        Login required.
      operationId: getUserA
      consumes:
        - application/json
        - text/plain
      produces:
        - application/json
      security:
        - token: [ ]
      responses:
        200:
          description: OK
          schema:
            "$ref": "#/definitions/UserA"
          examples:
            {
              "acceptedUsageTerms": true,
              "acceptsInfoMaterial": true,
              "bloodDonor": {
                "data": {
                  "ama": "1600791400",
                  "amka": "23038901379",
                  "ast": "Γ",
                  "birthCountry": {
                    "alpha2": "GR",
                    "alpha3": "GRC",
                    "id": "300",
                    "name": {
                      "el": "ΕΛΛΑΔΑ",
                      "en": "GREECE"
                      }
                    },
                   "birthDate": "1989-03-23",
                   "birthRegion": {
                      "id": "11",
                      "name": {
                        "el": "ΒΟΡΕΙΟΥ ΑΙΓΑΙΟΥ",
                        "en": "VOREIOU AIGAIOU"
                      }
                    },
                    "bloodGroup": "A",
                    "city": {
                      "id": "9088",
                      "name": {
                        "el": "ΖΗΡΟΥ",
                        "en": "ZIROU"
                      },
                      "prefecture": {
                        "id": "0404",
                        "name": {
                          "el": "ΠΡΕΒΕΖΑΣ",
                          "en": "PREVEZAS"
                        },
                        "region": {
                          "id": "4",
                          "name": {
                            "el": "ΗΠΕΙΡΟΥ",
                            "en": "IPEIROU"
                          }
                        }
                      }
                    },
                    "education": "LEVEL7",
                    "email": "papadakis@example.com",
                    "fathersName": "ΓΕΩΡΓΙΟΣ",
                    "firstname": "ΙΩΑΝΝΗΣ",
                    "gender": "MALE",
                    "imported": false,
                    "lastname": "ΠΑΠΑΔΑΚΗΣ",
                    "mothersName": "ΙΟΥΛΙΑ",
                    "phoneNumber": "2152157865",
                    "rhesus": "NEGATIVE",
                    "ssnCountry": {
                      "alpha2": "GR",
                      "alpha3": "GRC",
                      "id": "300",
                      "name": {
                        "el": "ΕΛΛΑΔΑ",
                        "en": "GREECE"
                      }
                    },
                  "street": "ΓΚΑΝΤΕΜΗ",
                  "streetNumber": "13"
                },
                "deleted": false,
                "duplicate": false,
                "id": 87588,
                "idikaVerified": true
              },
              "email": "papadakis@example.com",
              "emailValid": true,
              "id": 8616993,
              "registrationDate": "2016-06-23T13:03:47.308+0000",
              "registrationId": "CnEi7MuQBBnnaggqfiPBuImTjJLXpwFTcU6nKIJN4yc",
              "status": "ACTIVE",
              "userType": "BloodDonorUser",
              "username": "papadakis",
              "version": 4
            }

  /blood-donor-registry-web-public/rest/blooddonor/{id}:
    get:
      summary: TBA
      description: Retrieve user data
      operationId: getUserB
      parameters:
      - name: 'id'
        in: path
        type: string
        required: true
      consumes:
        - application/json
        - text/plain
      produces:
        - application/json
      security:
        - token: [ ]

      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/UserB"
          examples:
            {
              "bloodDonor":{
                "id":87588,
                "city":{
                  "prefecture":{
                    "id":"0404",
                    "name":"ΠΡΕΒΕΖΑΣ",
                    "region":{
                      "id":"4",
                      "name":"ΗΠΕΙΡΟΥ"
                    }
                  },
                  "id":"9088",
                  "name":"ΖΗΡΟΥ"
                },
                "verification":{
                  "ama":false,
                  "adt":false,
                  "ast":false,
                  "adb":false,
                  "amka":false,
                  "aad":false,
                  "aat":false,
                  "aap":false,
                  "firstname":false,
                  "lastname":false,
                  "fathersName":false,
                  "mothersName":false,
                  "birthDate":false
                },
                "birthCountry":{
                  "id":"300",
                  "alpha2":"GR",
                  "alpha3":"GRC",
                  "name":"ΕΛΛΑΔΑ"
                },
                "birthRegion":{
                  "id":"11",
                  "name":"ΒΟΡΕΙΟΥ ΑΙΓΑΙΟΥ"
                },
                "discardedOnce":false,
                "recentVisit":false,
                "idikaVerified":true,
                "ssnCountry":{
                  "id":"300",
                  "alpha2":"GR",
                  "alpha3":"GRC",
                  "name":"ΕΛΛΑΔΑ"
                },
                "firstname":"ΙΩΑΝΝΗΣ",
                "lastname":"ΠΑΠΑΔΑΚΗΣ",
                "ast":"Γ",
                "education":"LEVEL7",
                "street":"ΜΕΣΟΓΕΙΩΝ",
                "streetNumber":"13",
                "phoneNumber":"2152157865",
                "email":"papadakis@example.com",
                "ama":"1600791400",
                "bloodGroup":"A",
                "rhesus":"NEGATIVE",
                "fathersName":"ΓΕΩΡΓΙΟΣ",
                "mothersName":"ΙΟΥΛΙΑ",
                "amka":"23038901379",
                "gender":"MALE",
                "birthDate":"1989-03-23"
              },
              "id":8616993,
              "username":"papadakis",
              "email": "papadakis@example.com",
              "status":"ACTIVE",
              "userType":"BloodDonorUser",
              "emailValid":true,
              "registrationDate":"2016-06-23T13:03:47.308+0000",
              "registrationId":"CnEi7MuQBBnnaggqfiPBuImTjJLXpwFTcU6nKIJN4yc"
            }
        401:
          description: |
            Unauthorized.

            When the ID is valid but the logged in user has no permission to get its data.
          schema:
            $ref: "#/definitions/ErrorMsg"
          examples:
            application/json:
              { error: "Not Allowed" }
        404:
          description: |
            Not found.

            When there is no blood donor with the current ID or no ID has been sent.
          schema:
            $ref: "#/definitions/ErrorMsg"
          examples:
            application/json:
              { error: "Not Found" }

  /blood-donor-registry-web-public/rest/blooddonor/{id}/request:
    get:
      summary: TBA
      description: Retrieve user request
      operationId: getDonorRequest
      parameters:
      - name: 'id'
        in: path
        type: string
        required: true
      consumes:
        - application/json
        - text/plain
      produces:
        - application/json
      security:
        - token: [ ]

      responses:
        404:
          description: Not Found
          schema:
            $ref: "#/definitions/ErrorMsg"
          examples:
            application/json:
              { error: "Not Found" }

  /blood-donor-registry-web-public/rest/blooddonor/region/countries:
    get:
      summary:
        Get id, name and codes of all countries.

      description: |
        The name of the country is in the language that the request mentions.

        The code of each country comes in 2 forms:

        - ISO 3166-1 alpha-2
        - ISO 3166-1 alpha-3

      operationId: getCountries
      consumes:
        - application/json
        - text/plain
      produces:
        - application/json
      security:
        - token: [ ]
      parameters:
      - name: 'X-Lang'
        in: header
        type: string
        required: true
        description: |
          Possible values: en, el

      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/CountrySingleLanguage"
          examples:
            application/json:
              [
                {
                  "alpha2":"AF",
                  "alpha3":"AFG",
                  "id":"4",
                  "name":"AFGHANISTAN"
                },
                {
                  "id":"8",
                  "alpha2":"AL",
                  "alpha3":"ALB",
                  "name":"ALBANIA"
                }
              ]

  /blood-donor-registry-web-public/rest/blooddonor/region/regions:
    get:
      summary:
        Get id and name of all greek regions.

      description: The name of the region is in the language that the request mentions.
      operationId: getRegions
      consumes:
        - application/json
        - text/plain
      produces:
        - application/json
      security:
        - token: [ ]
      parameters:
      - name: 'X-Lang'
        in: header
        type: string
        required: true
        description: |
          Possible values: en, el
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/RegionSingleLanguage"
          examples:
            application/json:
              [
                {
                  "id":"1",
                  "name":"AN. MAKEDONIAS & THRAKIS"
                },
                {
                  "id":"2",
                  "name":"KENTRIKIS MAKEDONIAS"
                }
              ]

  /blood-donor-registry-web-public/rest/blooddonor/region/cities/{regionID}:
    get:
      summary: Get the cities of a greek region


      description: Get a list with information about the cities of a region in the requested language.
      operationId: getCities
      consumes:
        - application/json
        - text/plain
      produces:
        - application/json
      security:
        - token: [ ]
      parameters:
      - name: regionID
        in: path
        type: string
        required: true
      - name: 'X-Lang'
        in: header
        type: string
        required: true
        description: |
          Possible values: en, el
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/CitySingleLanguage"
          examples:
            application/json:
              [
                {
                  "prefecture": {
                    "id":"0401",
                    "name":"ARTAS",
                    "region": {
                      "id":"4",
                      "name":"IPEIROU"
                    }
                  },
                  "id":"9073",
                  "name":"ARTAION"
                }
              ]

securityDefinitions:
  token:
    type: apiKey
    in: header
    name: X-Auth-Token


definitions:

  ErrorMsg:
    type: object
    properties:
      error:
        type: string
  Captcha:
    type: object
    properties:
      id:
        type: string
      img:
        type: string
  Issue:
    type: object
    required:
    - captchaId
    - captchaAnswer
    - subject
    - type
    properties:
      captchaId:
        type: integer
      captchaAnswer:
        type: string
      description:
        type: string
      email:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      phoneNumber:
        type: string
      subject:
        type: string
      type:
        type: string
  IssueWithKey:
    type: object
    properties:
      captchaId:
        type: integer
      captchaAnswer:
        type: string
      description:
        type: string
      email:
        type: string
      firstName:
        type: string
      key:
        type: string
      lastName:
        type: string
      phoneNumber:
        type: string
      subject:
        type: string
      type:
        type: string
  CityMultiLanguage:
    type: object
    properties:
      id:
        type: integer
      name:
        $ref: "#/definitions/MultiLanguage"
      prefecture:
        type: object
        properties:
          id:
            type: integer
          name:
            $ref: "#/definitions/MultiLanguage"
          region:
            $ref: "#/definitions/RegionMultiLanguage"

  CitySingleLanguage:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      prefecture:
        type: object
        properties:
          id:
            type: integer
          name:
            type: string
          region:
            $ref: "#/definitions/RegionSingleLanguage"

  CountryMultiLanguage:
    type: object
    properties:
      id:
        type: integer
      alpha2:
        type: string
      alpha3:
        type: string
      name:
        $ref: "#/definitions/MultiLanguage"

  CountrySingleLanguage:
    type: object
    properties:
      id:
        type: integer
      alpha2:
        type: string
      alpha3:
        type: string
      name:
        type: string

  RegionMultiLanguage:
    type: object
    properties:
      id:
        type: integer
      name:
        $ref: "#/definitions/MultiLanguage"

  RegionSingleLanguage:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string

  MultiLanguage:
    type: object
    properties:
      el:
        type: string
      en:
        type: string

  UserA:
    type: object
    properties:
      acceptedUsageTerms:
        type: boolean
      acceptsInfoMaterial:
        type: boolean
      bloodDonor:
        type: object
        properties:
          data:
            type: object
            properties:
              ama:
                type: integer
              amka:
                type: integer
              ast:
                type: string
              birthCountry:
                $ref: "#/definitions/CountryMultiLanguage"
              birthDate:
                type: string
                format: date
              birthRegion:
                $ref: "#/definitions/RegionMultiLanguage"
              bloodGroup:
                type: string
              city:
                $ref: "#/definitions/CityMultiLanguage"
              education:
                type: string
              email:
                type: string
              fathersName:
                type: string
              firstname:
                type: string
              gender:
                type: string
              imported:
                type: boolean
              lastname:
                type: string
              mothersName:
                type: string
              phoneNumber:
                type: integer
              rhesus:
                type: string
              ssnCountry:
                $ref: "#/definitions/CountryMultiLanguage"
              street:
                type: string
              streetNumber:
                type: integer
          deleted:
            type: boolean
          duplicate:
            type: boolean
          id:
            type: integer
          idikaVerified:
            type: boolean
      email:
        type: string
      emailValid:
        type: boolean
      id:
        type: integer
      registrationDate:
        type: string
        format: date-time
      registrationId:
        type: string
      status:
        type: string
      userType:
        type: string
      username:
        type: string
      version:
        type: integer

  UserB:
    type: object
    properties:
      bloodDonor:
        type: object
        properties:
          ama:
            type: integer
          amka:
            type: integer
          ast:
            type: string
          birthCountry:
            $ref: "#/definitions/CountrySingleLanguage"
          birthDate:
            type: string
            format: date
          birthRegion:
            $ref: "#/definitions/RegionSingleLanguage"
          bloodGroup:
            type: string
          city:
            $ref: "#/definitions/CitySingleLanguage"
          discardedOnce:
            type: boolean
          education:
            type: string
          email:
            type: string
          fathersName:
            type: string
          firstname:
            type: string
          gender:
            type: string
          id:
            type: integer
          idikaVerified:
            type: boolean
          lastname:
            type: string
          mothersName:
            type: string
          phoneNumber:
            type: integer
          recentVisit:
            type: boolean
          rhesus:
            type: string
          ssnCountry:
            $ref: "#/definitions/CountrySingleLanguage"
          street:
            type: string
          streetNumber:
            type: integer
          verification:
            type: object
            properties:
              aad:
                type: boolean
              aap:
                type: boolean
              aat:
                type: boolean
              adb:
                type: boolean
              adt:
                type: boolean
              ama:
                type: boolean
              amka:
                type: boolean
              ast:
                type: boolean
              birthDate:
                type: boolean
              fathersName:
                type: boolean
              firstname:
                type: boolean
              lastname:
                type: boolean
              mothersName:
                type: boolean
      email:
        type: string
      emailValid:
        type: boolean
      id:
        type: integer
      registrationDate:
        type: string
        format: date-time
      registrationId:
        type: string
      status:
        type: string
      userType:
        type: string
      username:
        type: string
